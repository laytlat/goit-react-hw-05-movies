{"version":3,"file":"static/js/157.fcaa27e5.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","utils/GetDataFromAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledMovieCard = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const MoviePoster = styled.img`\n  width: 300px;\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const AdditionalInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  AdditionalInfo,\n  MovieInfo,\n  MoviePoster,\n  StyledMovieCard,\n} from './MovieCard.styled';\n\nexport function MovieCard({ image, title, description, genres, rating }) {\n  const genresList = genres?.flatMap(genre => genre.name);\n  const userScore = Math.round(rating * 10);\n  const imgURL = 'https://image.tmdb.org/t/p/w500';\n  return (\n    <StyledMovieCard>\n      <MoviePoster src={`${imgURL}${image}`} alt={title} />\n      <MovieInfo>\n        <h2>{title}</h2>\n        <p>{`User Score: ${userScore}%`}</p>\n        <div>\n          {' '}\n          <h3>Overview</h3>\n          <p>{description}</p>\n        </div>\n        <div>\n          {' '}\n          <h3>Genres</h3>\n          <p>{genresList?.join(', ')}</p>\n        </div>\n        <h4>Additional information</h4>\n        <AdditionalInfo>\n          <Link to=\"cast\">Cast</Link>\n          <Link to=\"reviews\">Reviews</Link>\n        </AdditionalInfo>\n      </MovieInfo>\n    </StyledMovieCard>\n  );\n}\n\nMovieCard.propTypes = {\n  image: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  genres: PropTypes.array,\n  rating: PropTypes.number,\n};\n","import { MovieCard } from 'components/MovieCard/MovieCard';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieById } from 'utils/GetDataFromAPI';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    getMovieById(movieId).then(data => setMovie(data));\n  }, [movieId]);\n\n  const { poster_path, title, name, overview, genres, vote_average } = movie;\n\n  return (\n    <>\n      <Link to={backLink.current}>Go back</Link>\n      <MovieCard\n        image={poster_path}\n        title={title ?? name}\n        description={overview}\n        genres={genres}\n        rating={vote_average}\n      ></MovieCard>\n\n      <Outlet />\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst TRENDING_URL = 'https://api.themoviedb.org/3/trending/all/day';\nconst MOVIE_SEARCH_BY_ID = 'https://api.themoviedb.org/3/movie/';\nconst MOVIE_SEARCH_BY_NAME = 'https://api.themoviedb.org/3/search/movie?query=';\nconst options = {\n  params: {\n    api_key: 'e5d9357826e56bc41f11884e07241fb9',\n  },\n};\n\nexport async function getTrendingsFromAPI() {\n  const data = await axios\n    .get(TRENDING_URL, options)\n    .then(response => response.data);\n  return data;\n}\n\nexport async function getMovieById(movieId) {\n  const data = await axios\n    .get(MOVIE_SEARCH_BY_ID + movieId, options)\n    .then(response => response.data);\n  return data;\n}\n\nexport async function getMovieByName(movieName) {\n  const data = await axios\n    .get(MOVIE_SEARCH_BY_NAME + movieName, options)\n    .then(response => response.data);\n  return data;\n}\n\nexport async function getMovieDetails(movieId, path) {\n  const data = await axios\n    .get(MOVIE_SEARCH_BY_ID + movieId + `/${path}`, options)\n    .then(response => response.data);\n  return data;\n}\n"],"names":["StyledMovieCard","styled","MoviePoster","MovieInfo","AdditionalInfo","MovieCard","image","title","description","genres","rating","genresList","flatMap","genre","name","userScore","Math","round","src","alt","join","to","MovieDetails","useState","movie","setMovie","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","getMovieById","then","data","poster_path","overview","vote_average","current","TRENDING_URL","MOVIE_SEARCH_BY_ID","MOVIE_SEARCH_BY_NAME","options","params","api_key","getTrendingsFromAPI","axios","response","getMovieByName","movieName","getMovieDetails","path"],"sourceRoot":""}